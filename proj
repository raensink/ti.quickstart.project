#!/usr/bin/env ruby

# ==============================================================================================#=
# FILE:
#     proj.rb
#
# DESCRIPTION:
#     """"""""""""""""""""""""""""""""""""""""""""""""""""""
#     """"""""""""""""""""""""""""""""""""""""""""""""""""""
#     """"""""""""""""""""""""""""""""""""""""""""""""""""""
#     """"""""""""""""""""""""""""""""""""""""""""""""""""""
#
# DEPENDENCIES:
#     <project dir>/<this repo dir>/<this file>
#     <project dir>/<this repo dir>/lib/project_repo.rb
#     <project dir>/<this repo dir>/lib/system_command.rb
#
#     """"""""""""""""""""""""""""""""""""""""""""""""""""""
#     """"""""""""""""""""""""""""""""""""""""""""""""""""""
# ==============================================================================================#=

require 'yaml'

# ------------------------------------------------------------------------------+-
# Configuration & Current Environment
# ------------------------------------------------------------------------------+-
$DIRPATH_THISREPO  = File.expand_path(File.dirname(__FILE__))
$DIRPATH_RUBYLIB   = "#{$DIRPATH_THISREPO}/lib"
$DIRPATH_PROJECT   = File.dirname $DIRPATH_THISREPO

$gCustomCommandFile = "#{$DIRPATH_THISREPO}/project_config.yaml"

$LOAD_PATH.insert(0, $DIRPATH_RUBYLIB) unless $LOAD_PATH.include?($DIRPATH_RUBYLIB)

require 'project_repo.rb'
require 'system_command.rb'



# ------------------------------------------------------------------------------+-
# Command Line Arguments
# ------------------------------------------------------------------------------+-
$gCommand   = nil
$gSubCmdArg = nil
$gArg       = nil

unless ARGV.empty?
  $gCommand  = ARGV[0]
end

if ARGV.length >= 2
  $gSubCmdArg = ARGV[1]
end

if ARGV.length >= 3
  $gArg = ARGV[2]
end


# ------------------------------------------------------------------------------+-
# Methods
# ------------------------------------------------------------------------------+-
def puts_help
  puts <<-EOF

SYNOPSIS:
  proj command [argument or sub-command [argument]]

DESCRIPTION:
  This script can be used to generate the .config and .config_test.yaml files
  using menuConfig/Kconfig and the user's config_custom.yaml or some other
  specified .yaml file.

COMMANDS:
  proj repo list       # list details of each configured repository.
  proj repo status     # list brief summary status of each repo.
  proj repo fetch      # clone (as needed) and 'git fetch origin' each repo.
  proj repo branch     # ?????????????????????
  proj repo tag        # ?????????????????????

  proj [help | --help | -h]   # show help

EOF
end


def failure
  exit(1)
end


def success
  exit(0)
end


def read_project_configuration_from_file
  project_config = nil
  begin
    project_config = YAML.load(File.open($gCustomCommandFile))
  rescue => e
    raise "ERROR processing config file: #{fp} - " + e.inspect
  end
  return project_config
end


def get_list_of_repo_objects
  proj_repo_list = []

  proj_config = read_project_configuration_from_file

  proj_config[:repositories].each do |repo|
    name_key = repo.keys[0]

    repo_config = {
      :repo_name  => name_key,
      :git_url    => repo[name_key][:git_url],
    }

    if repo[name_key].has_key?(:dir_name)
      repo_config[:dir_name] = repo[name_key][:dir_name]
    end
    proj_repo_list << ProjectRepo.new(repo_config)
  end

  return proj_repo_list
end


def list_each_repository
  puts
  puts 'proj repo list: '
  proj_repo_list = get_list_of_repo_objects
  proj_repo_list.each do |repo|
    puts " "
    puts repo
  end
end


def report_summary_status_of_each_repository
  proj_repo_list = get_list_of_repo_objects

  printFormat = "%48s : %-9s %6s/%5s %s \n"

  puts
  puts 'proj repo status: '
  puts '================================================================================================#='
  printf printFormat,
    "Repo",
    "Clean?",
    "Behind",
    "Ahead",
    "Branch"
  puts '================================================================================================#='

  proj_repo_list.each do |repo|
    if !repo.is_a_git_repo?
      clean = ""
    elsif repo.is_clean?
      clean = "clean"
    else
      clean = "NOT-CLEAN"
    end

    if !repo.is_a_git_repo?
      behind = ""
    elsif repo.is_behind?
      behind = "Behind"
    else
      behind = ""
    end

    if !repo.is_a_git_repo?
      ahead = ""
    elsif repo.is_behind?
      ahead = "Ahead"
    else
      ahead = ""
    end

    if !repo.is_a_git_repo?
      branch = ""
    else
      branch = repo.on_branch
    end

    printf printFormat,
      repo.dir_name,
      clean,
      behind,
      ahead,
      branch
  end
end


def fetch_each_repository
  puts
  puts 'proj repo fetch: '
  proj_repo_list = get_list_of_repo_objects
  proj_repo_list.each do |repo|
    # Fetch into the current directory.
    puts repo.fetch $DIRPATH_PROJECT
  end
end


def handle_command_repo(given_sub_command, given_argument)
  if given_sub_command.nil?
    puts
    puts "proj: the 'repo' command requires a sub-command.  See: proj repo help."
    puts
    failure

  elsif given_sub_command == 'status'
    report_summary_status_of_each_repository

  elsif given_sub_command == 'list'
    list_each_repository

  elsif given_sub_command == 'fetch'
    fetch_each_repository

  else
    puts
    puts "proj: '#{given_sub_command}' is not a recognized 'repo' sub-command."
    puts
    failure
  end
end


# ==============================================================================================#=
# Main
# ==============================================================================================#=

# ------------------------------------------------------------------------------+-
# Top Level Command Recognition
# ------------------------------------------------------------------------------+-
unless $gCommand
  puts
  puts "proj: a command is required. See the help text shown below:"
  puts_help
  failure
end

if %w(-h --help help).include?  $gCommand
  puts_help

elsif 'repo' == $gCommand
  handle_command_repo($gSubCmdArg, $gArg)

else
  puts
  puts "proj: '#{$gCommand}' is not a recognized command."
  puts
  failure
end

success







__END__

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+~
------------------------------------------------------------------------------------------------+-
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|@
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+#+
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-#-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#=
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=+=
